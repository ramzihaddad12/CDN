#!/usr/bin/env python3

from constants import * 
from dnslib import * 
import socketserver
import argparse
from replicaselector import ReplicaSelector

# https://docs.python.org/3/library/socketserver.html#socketserver.TCPServer
class UDPRequestHandler(socketserver.BaseRequestHandler):
    global replica_selector
    replica_selector = ReplicaSelector()

    def handle(self):
        # Data sent to the socket/ data requested
        data = self.request[0].strip()
        socket = self.request[1]

        dns_record = self.get_dns_response_packet(data, self.client_address[0])
        socket.sendto(dns_record, self.client_address)


    # Function to choose which replica to send the client to
    def choose_which_replica(self, client_ip):
        # active measurement logic would go here, but for now just geo info
        return replica_selector.get_closest_replica(client_ip)

    # Function that parses incoming DNS packet 
    # Citation: https://pypi.org/project/dnslib/
    def parse_dns_packet(self, packet):
        parsed_incoming_packet = DNSRecord.parse(packet)
        
        incoming_query_id = parsed_incoming_packet.header.id
        incoming_query_type = parsed_incoming_packet.q.qtype
        incoming_query_name = parsed_incoming_packet.q.qname
        incoming_query_class = parsed_incoming_packet.q.qclass

        return incoming_query_id, incoming_query_type, incoming_query_name, incoming_query_class

    # Function to get the DNS response containg info about replica server that client should redirect to
    # Citation: https://pypi.org/project/dnslib/
    def get_dns_response_packet(self, packet, client_ip):
        # Parse DNS Packet
        incoming_query_id, incoming_query_type, incoming_query_name, incoming_query_class = self.parse_dns_packet(packet)
        # Check if query type is A
        if incoming_query_type != 1:
            raise Exception("Query should be of type A")
        # Choose replica
        chosen_replica, chosen_replica_by_IP = self.choose_which_replica(client_ip)

        # Creating a DNS Response Packet 
        response_packet = DNSRecord(DNSHeader(id = incoming_query_id, qr=1,aa=1,ra=1), q=DNSQuestion(incoming_query_name, incoming_query_type, incoming_query_class),a=RR(chosen_replica,rdata=A(chosen_replica_by_IP)))
        
        return response_packet.pack()


if __name__ == '__main__':
    # Parse command and run DNS server forever
    parser = argparse.ArgumentParser(description='CS5700 CDN Project')
    parser.add_argument("-p", default=PORT_NUMBER, action='store', type=int, help="Port Number of DNS Server")
    parser.add_argument("-n", required=True, action='store', type = str, help="Name is the CDN-specific name that your server translates to an IP")
    
    args = parser.parse_args()
    server_port = args.p
    server_name = args.n # name is the CDN-specific name that your server translates to an IP.
    
    with socketserver.UDPServer((DNS_SERVER_IP_ADDRESS, server_port), UDPRequestHandler) as server:
        server.serve_forever()